{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","Dflt","sortButtonName","setSortButtonName","isReversed","setIsReversed","sortField","goods","prepareGoods","Alphabetically","sort","good1","good2","localeCompare","Length","length","reverse","getPreparingGoods","className","type","cn","onClick","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,4EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,K,gCAAAA,E,gBAAAA,E,SAAAA,M,KAoCE,IAAME,EAAgB,WAC3B,MAA4CC,mBAAmBH,EAASI,MAAxE,mBAAOC,EAAP,KAAuBC,EAAvB,KACA,EAAoCH,oBAAS,GAA7C,mBAAOI,EAAP,KAAmBC,EAAnB,KACMC,EAjCR,SACEC,EACAL,EACAE,GAEA,IAAII,EAAY,YAAOD,GAEvB,OAAQL,GACN,KAAKL,EAASY,eAAgBD,EAAeA,EAC1CE,MAAK,SAACC,EAAOC,GAAR,OACJD,EAAME,cAAcD,MAEtB,MAEF,KAAKf,EAASiB,OAAQN,EAAeA,EAClCE,MAAK,SAACC,EAAOC,GAAR,OACJD,EAAMI,OAASH,EAAMG,UAEvB,MAEF,QAASP,EAAY,UAAOV,GAO9B,OAJIM,IACFI,EAAeA,EAAaQ,WAGvBR,EAMWS,CAChBnB,EACAI,EACAE,GAOF,OACE,sBAAKc,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UACEE,IACE,SACA,UACA,CAAE,WAAYlB,IAAmBL,EAASY,iBAG9CY,QAAS,kBAAMlB,EAAkBN,EAASY,iBAT5C,iCAcA,wBACEU,KAAK,SACLD,UACEE,IACE,SACA,aACA,CAAE,WAAYlB,IAAmBL,EAASiB,SAG9CO,QAAS,kBAAMlB,EAAkBN,EAASiB,SAT5C,4BAcA,wBACEK,KAAK,SACLD,UACEE,IACE,SACA,aACA,CAAE,YAAahB,IAGnBiB,QAAS,kBAAMhB,GAAeD,IAThC,sBAcEA,GAAcF,IACd,wBACEiB,KAAK,SACLD,UAAU,4BACVG,QAtDI,WACZlB,EAAkBN,EAASI,MAC3BI,GAAc,IAiDR,sBAUJ,6BACGC,EAAUgB,KAAI,SAAAC,GAAI,OACjB,oBAEE,UAAQ,OAFV,SAIGA,GAHIA,YC3HjBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.c55e457e.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport cn from 'classnames';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  Alphabetically = 'Alphabetically',\n  Length = 'Length',\n  Dflt = '',\n}\n\nfunction getPreparingGoods(\n  goods: string[],\n  sortButtonName: SortType,\n  isReversed: boolean,\n): string[] {\n  let prepareGoods = [...goods];\n\n  switch (sortButtonName) {\n    case SortType.Alphabetically: prepareGoods = prepareGoods\n      .sort((good1, good2) => (\n        good1.localeCompare(good2)\n      ));\n      break;\n\n    case SortType.Length: prepareGoods = prepareGoods\n      .sort((good1, good2) => (\n        good1.length - good2.length\n      ));\n      break;\n\n    default: prepareGoods = [...goodsFromServer];\n  }\n\n  if (isReversed) {\n    prepareGoods = prepareGoods.reverse();\n  }\n\n  return prepareGoods;\n}\n\nexport const App: React.FC = () => {\n  const [sortButtonName, setSortButtonName] = useState<SortType>(SortType.Dflt);\n  const [isReversed, setIsReversed] = useState(false);\n  const sortField = getPreparingGoods(\n    goodsFromServer,\n    sortButtonName,\n    isReversed,\n  );\n  const reset = () => {\n    setSortButtonName(SortType.Dflt);\n    setIsReversed(false);\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={\n            cn(\n              'button',\n              'is-info',\n              { 'is-light': sortButtonName !== SortType.Alphabetically },\n            )\n          }\n          onClick={() => setSortButtonName(SortType.Alphabetically)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={\n            cn(\n              'button',\n              'is-success',\n              { 'is-light': sortButtonName !== SortType.Length },\n            )\n          }\n          onClick={() => setSortButtonName(SortType.Length)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={\n            cn(\n              'button',\n              'is-warning',\n              { 'is-light': !isReversed },\n            )\n          }\n          onClick={() => setIsReversed(!isReversed)}\n        >\n          Reverse\n        </button>\n\n        {(isReversed || sortButtonName) && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={reset}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {sortField.map(good => (\n          <li\n            key={good}\n            data-cy=\"Good\"\n          >\n            {good}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}